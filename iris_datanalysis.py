# -*- coding: utf-8 -*-
"""Iris data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mjWV5DmzEiH2nt2beBghRR9kwq1EJBFS
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.linear_model import LinearRegression



class Modelo():
  def __init__(self):
        self.dataset = None
        self.df = None

  def CarregarDataset(self, path):
      names = ['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm', 'Species']
      try:
        self.dataset = pd.read_csv(path, names=names, header=None, sep = ",")
        self.df = pd.read_csv(path, names=names, header=None, sep = ",")
        print("dataset carregado com sucesso")
        return True
      except FileNotFoundError:
        print(f'Erro: Arquivo {path} não encontrado.')
        return False
      except pd.errors.emptyDataError:
        print("Erro: O arquivo está vazio")
        return False
      except Exception as e:
        print(f'Erro ao carregar o dataset: {e}')
        return False

  def Obter_info(self):
        if self.dataset is not None:
          print("informação do Dataset:")
          print(self.dataset.info())
        else:
          print("nenhum dataset carregado")

  def TratamentoDeDados(self):
    if self.df is None:
      print("Dataset não carregado. Chame CarregarDataset() primeiro.")
      return

    # Histogramas
    self.df['SepalLengthCm'].hist()
    plt.title('Histograma de SepalLengthCm') # Add title
    plt.xlabel('SepalLengthCm') # Add x-axis label
    plt.ylabel('Frequência') # Add y-axis label
    plt.show()

    self.df['PetalLengthCm'].hist()
    plt.title('Histograma de PetalLengthCm') # Add title
    plt.xlabel('PetalLength (cm)') # Add x-axis label
    plt.ylabel('Frequência') # Add y-axis label
    plt.show()

    self.df['SepalWidthCm'].hist()
    plt.title('Histograma de SepalWidthCm') # Add title
    plt.xlabel('SepalWidth (cm)') # Add x-axis label
    plt.ylabel('Frequência') # Add y-axis label
    plt.show()

    self.df['PetalWidthCm'].hist()
    plt.title('Histograma de PetalWidthCm') # Add title
    plt.xlabel('PetalWidth (cm)') # Add x-axis label
    plt.ylabel('Frequência') # Add y-axis label
    plt.show()

    # Scatterplots
    #comparando a relação entre variáveis do dataset com scatterplot:

    #1:Sepal Length x Sepal Width
    colors = ['red', 'orange', 'blue']
    species = ['Iris-setosa', 'Iris-versicolor', 'Iris-virginica']
    for i in range(3):
      x = self.df[self.df['Species'] == species[i]]
      plt.scatter(x['SepalLengthCm'], x['SepalWidthCm'], c=colors[i], label=species[i])
    plt.xlabel('Sepal Length')
    plt.ylabel('Sepal Width')
    plt.legend()
    plt.show()

    #2: Petal Length x Petal Width
    colors= ['red', 'orange' , 'blue']
    species = ['Iris-setosa', 'Iris-versicolor', 'Iris-virginica']
    for i in range(3):
      x = self.df[self.df['Species'] == species[i]]
      plt.scatter(x['PetalLengthCm'], x['PetalWidthCm'], c = colors[i], label=species[i])
    plt.xlabel('Petal Length')
    plt.ylabel('Petal Width')
    plt.legend()
    plt.show()

    #3: Sepal length x Petal Length
    colors= ['red', 'orange' , 'blue']
    species = ['Iris-setosa', 'Iris-versicolor', 'Iris-virginica']
    for i in range(3):
      x = self.df[self.df['Species'] == species[i]]
      plt.scatter(x['SepalLengthCm'], x['PetalLengthCm'], c = colors[i], label=species[i])
    plt.xlabel('Sepal Length')
    plt.ylabel('Petal Length')
    plt.legend()
    plt.show()

    #4: Sepal Width x Petal Width
    colors= ['red', 'orange' , 'blue']
    species = ['Iris-setosa', 'Iris-versicolor', 'Iris-virginica']
    for i in range(3):
      x = self.df[self.df['Species'] == species[i]]
      plt.scatter(x['SepalWidthCm'], x['PetalWidthCm'], c = colors[i], label=species[i])
    plt.xlabel('Sepal Width')
    plt.ylabel('Petal Width')
    plt.legend()
    plt.show()


    #Matriz de correlação
    corr = self.df[['SepalWidthCm', 'PetalWidthCm', 'SepalLengthCm', 'PetalLengthCm']].corr()
    fig, ax = plt.subplots(figsize=(5, 4))
    sns.heatmap(corr, annot=True, ax=ax, cmap='autumn')

    # Label Encoder
    #transformando os nomes das espécies em números (0, 1, 2)
    from sklearn.preprocessing import LabelEncoder
    le = LabelEncoder()
    self.df['Species'] = le.fit_transform(self.df['Species'])
    self.df.head()

    pass

  def Treinamento(self):
    #Model Training (70% e 30%)
    #Removendo 'species' do eixo X e deixando só ela no eixo y
    x= self.df.drop(columns=['Species'])
    y= self.df['Species']
    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=42)

    #Teste do modelo de regressão linear
    reg = LinearRegression()
    reg.fit(x_train, y_train)
    reg.score(x_train, y_train)
    print("Coef. de determinação de Regress. Lienar: ", reg.score(x_test, y_test)*100)

    #Teste do modelo KneighboursClass
    from sklearn.neighbors import KNeighborsClassifier
    knh= KNeighborsClassifier(n_neighbors=3)
    knh.fit(x_train, y_train)
    knh.score(x_train, y_train)
    print("Coef de determinação de KNeigborsC: ", knh.score(x_test, y_test)*100)

    #Teste do modelo kernel rbf
    from sklearn import svm
    classlinK= svm.SVC(kernel='rbf')
    classlinK.fit(x_train, y_train)
    classlinK.score(x_train, y_train)
    print("Coef. de determinação kernel rbf: ", classlinK.score(x_test, y_test)*100)

    # Teste do modelo kernel poly
    from sklearn import svm
    classlinK= svm.SVC(kernel='poly')
    classlinK.fit(x_train, y_train)
    classlinK.score(x_train, y_train)
    print("Coef de determinação kernel poly: ", classlinK.score(x_test, y_test)*100)

    pass

modelo = Modelo() #intanciando a classe modelo
modelo.CarregarDataset(r"iris.data") #carregando o dataset do exercício, upado no colab
modelo.Obter_info()

# Tratamento de dados opcional, pode ser comentado se não for necessário
modelo.TratamentoDeDados()

"""O método mostra uma alta correlação entre Petal width e Petal length, o que indica que poderíamos eliminar uma delas.
No entanto, como a quantidade de dados não é alta, essa eliminação não é imprescindível
O pré-processamento dos dados mostra que a espécie Iris-setosa tem atributos mais evidentemente distintos das demais. No entanto, existe um padrão de configuração da iris-versicolor e -virginica para o treinamento de uma machine learning para identificação destas.
"""

modelo.Treinamento()  # Executa o treinamento do modelo